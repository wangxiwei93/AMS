package com.routon.plcloud.admin.hardware.action;

import java.util.HashSet;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.runtime.ProcessInstanceQuery;
import org.activiti.engine.task.Task;
import org.apache.commons.lang.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.routon.plcloud.admin.hardware.service.HardwareService;
import com.routon.plcloud.admin.privilege.service.RoleService;
import com.routon.plcloud.common.PagingBean;
import com.routon.plcloud.common.UserProfile;
import com.routon.plcloud.common.constant.CVal;
import com.routon.plcloud.common.model.Group;
import com.routon.plcloud.common.model.HardwareProduct;
import com.routon.plcloud.common.persistence.HardwareProductMapper;
import com.routon.plcloud.common.utils.JsonMsgBean;

/**
 * 
 * @author wangxiwei
 *
 */
@Controller
@SessionAttributes(value = { "userPrivilege", "userProfile" })
public class HardwareController {
	
	 @Autowired
	 private RuntimeService runtimeService;
	 
	 @Autowired
	 private RoleService roleService;
	 
	 @Autowired
	 private TaskService taskService;
	 
	 @Autowired
	 private HardwareService hardwareService;
	 
	 @Autowired
	 private HardwareProductMapper hardwareProductMapper;
	
	@RequestMapping(value = "/hardware/show")
	public String list(HttpServletRequest request,
			@ModelAttribute("userProfile")
			UserProfile user, Model model, HttpSession session, String productName) {
		
		int page = NumberUtils.toInt(request.getParameter("page"), 1);
		int pageSize = NumberUtils.toInt(request.getParameter("pageSize"),
				10);
		int startIndex = (page - 1) * pageSize;
		
		ProcessInstanceQuery querylist = runtimeService.createProcessInstanceQuery()
				.orderByProcessInstanceId().desc().active();
		List<ProcessInstance> list = querylist.list();
		
		Map<String,String> map = roleService.queryRoleByUserId(user.getCurrentUserId().toString());
		
		String username = user.getCurrentUserRealName();
		
		List<Task> taskQuery = taskService.createTaskQuery().taskCandidateOrAssigned(username).list();
		
		PagingBean<HardwareProduct> hardwarelist = hardwareService.quryAll(startIndex, pageSize, productName);
		
		List<String> productAll = null;
		
		if(productName != null){
			productAll =  hardwareProductMapper.selectBySql2("select a.hardware_station from hardwareproduct a where a.hardware_product_name like '%" + productName + "%'");
		} else{
			productAll =  hardwareProductMapper.selectBySql2("select a.hardware_station from hardwareproduct a");
		}
		
		HashSet<String> hardwareSet = new HashSet<String>();
		
		for(int i = 0; i < hardwarelist.getTotalCount(); i++){
			hardwareSet.add(productAll.get(i));
		}
		
		hardwarelist.setStart(startIndex);
		hardwarelist.setLimit(pageSize);
		int maxpage = (int) Math.ceil(hardwarelist.getTotalCount()
				/ (double) pageSize);
		if (hardwarelist.getTotalCount() == 0) {
			maxpage = 0;
		}

		model.addAttribute("productName", productName);
		model.addAttribute("maxpage", maxpage);
		model.addAttribute("page", page);
		model.addAttribute("pageList", hardwarelist);
		model.addAttribute("List", taskQuery);
		model.addAttribute("hardwareSet", hardwareSet);
		return "hardware/productShow";
	}
	
	@RequestMapping(value = "/hardware/add")
	public String add(Model model, String productName, String erpCode, String hardwareVersion, String hardwarePlatform,
			String systemVersion, boolean edit, Integer updateId){
		JsonMsgBean jsonMsg = null;
		if(updateId == null){
			
			Long id = hardwareService.save(productName, erpCode, hardwareVersion, hardwarePlatform, systemVersion);
			if (id > 0) {

				jsonMsg = new JsonMsgBean(0, CVal.Success, "保存成功!");
			}
			else {
				jsonMsg = new JsonMsgBean(0, CVal.Fail, "保存失败!");
			}
		} else{
			
			Long id = hardwareService.edit(updateId);
			if (id > 0) {

				jsonMsg = new JsonMsgBean(0, CVal.Success, "保存成功!");
			}
			else {
				jsonMsg = new JsonMsgBean(0, CVal.Fail, "保存失败!");
			}
		}

		model.addAttribute("jsonMsg", jsonMsg);

		return "common/jsonTextHtml";
	}
	
	@RequestMapping(value = "/hardware/querybyId")
	@ResponseBody public List<HardwareProduct> queryByID(Integer id){
		List<HardwareProduct> list = hardwareProductMapper.selectById(id);
		return list;
	}
	
	@RequestMapping(value = "/hardware/delete.do")
	public String deleteProduct(Model model, Integer id){
		JsonMsgBean jsonMsg = null;
		try {
			hardwareProductMapper.deleteById(id);
			jsonMsg = new JsonMsgBean(0, CVal.Success,
					"删除成功!");
		} catch (Exception e) {
			jsonMsg = new JsonMsgBean(0, CVal.Fail,
					"删除失败!");
			e.printStackTrace();
		}
		model.addAttribute("jsonMsg", jsonMsg);
		return "common/jsonTextHtml";
	}
}
